library(leaflet)
library(ggplot2)
library(dplyr)
# The order of loading is important, leave the dependencies in this order
library(ggplot2)
library(dplyr)
vote <- read.csv("australian_marriage_law_postal_survey_2017.csv")
vote <- read.csv("australian_marriage_law_postal_survey_2017.csv")
source("//wsl.localhost/Ubuntu/home/john/maths_notes/datavizWithR/choropleth_map_example.R")
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
library(ggplot2)
library(ggpubr)
library(ks)
library(rjags)
library(runjags)
source("DBDA2E-utilities.R")
setwd("//wsl.localhost/Ubuntu/home/john/maths_notes/Bayesian_Analyses/BayesianRegression")
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
library(ggplot2)
library(ggpubr)
library(ks)
library(rjags)
library(runjags)
source("DBDA2E-utilities.R")
source("providedCode.R")
myData <- read.csv("Assignment2PropertyPrices.csv")
myData <- myData[sample(nrow(myData)),] # shuffle the data
myData <- head(myData, 400)
# THE DATA.
y = myData[,"SalePrice.100K."]
x = as.matrix(myData[,c("Area","Bedrooms","Bathrooms","CarParks","PropertyType")])
cat("\nCORRELATION MATRIX OF PREDICTORS:\n ")
show( round(cor(x),3) )
cat("\n")
hist(myData$Area)
hist(myData$Bedrooms)
hist(myData$Bathrooms)
hist(myData$CarParks)
dataList <- list(
x = x ,
y = y ,
Nx = dim(x)[2] ,    # variable count
Ntotal = dim(x)[1]  # observation count
)
# allow jags to determine initialising values
# THE MODEL.
modelString = "
# Standardize the data:
data {
priorMu0   <- 0
priorMu[1] <- 90
priorMu[2] <- 100000
priorMu[3] <- 120000
priorMu[4] <- 0
priorMu[5] <- -150000 # unit = 1, house = 0, unit sells $150000 less
priorVar0   <- 1
priorVar[1] <- 0.01 # very strong knowledge
priorVar[2] <- 1    # weak knowledge
priorVar[3] <- 20   # no expert knowledge
priorVar[4] <- 0.1
priorVar[5] <- 0.1
ysd <- sd(y)
for ( i in 1:Ntotal ) {
zy[i] <- y[i] / ysd
}
for ( j in 1:Nx ) {
xsd[j] <-   sd(x[,j])
for ( i in 1:Ntotal ) {
zx[i,j] <- ifelse( j == Nx , x[i,j] , x[i,j] / xsd[j] ) # last var is dummy, don't standardise it
# zx[i,j] <- x[i,j] / xsd[j]
}
# now standardise the prior mean and variance for this variable j
# but not for the last variable, because it is categorical binary
zPriorMu[j] <- ifelse( j == Nx , priorMu[j] , priorMu[j] / xsd[j] )
zPriorVar[j] <- ifelse( j == Nx , priorVar[j] , priorVar[j] / xsd[j] )
}
# Specify the values of indepdenent variables for prediction
# There are 5 predictions, and 5 values for each (over 5 variables)
xPred[1,1] <- 600
xPred[2,1] <- 800
xPred[3,1] <- 1500
xPred[4,1] <- 2500
xPred[5,1] <- 250
xPred[1,2] <- 2
xPred[2,2] <- 3
xPred[3,2] <- 2
xPred[4,2] <- 5
xPred[5,2] <- 3
xPred[1,3] <- 2
xPred[2,3] <- 1
xPred[3,3] <- 1
xPred[4,3] <- 4
xPred[5,3] <- 2
xPred[1,4] <- 1
xPred[2,4] <- 2
xPred[3,4] <- 1
xPred[4,4] <- 4
xPred[5,4] <- 1
xPred[1,5] <- 1
xPred[2,5] <- 0
xPred[3,5] <- 0
xPred[4,5] <- 0
xPred[5,5] <- 1
}
# Specify the model for scaled data:
model {
for ( i in 1:Ntotal ) {
zy[i] ~ dgamma( (mu[i]^2)/zVar , mu[i]/zVar )
mu[i] <- zbeta0 + sum( zbeta[1:Nx] * zx[i,1:Nx] )
}
# intercept prior
zbeta0 ~ dnorm( priorMu0 , priorVar0^(-1/2) )
# other betas - since these are standard, then sd=1 would be standard.
zbeta[1] ~ dnorm(zPriorMu[1], zPriorVar[1]^(-1/2))
zbeta[2] ~ dnorm(zPriorMu[2], zPriorVar[2]^(-1/2))
zbeta[3] ~ dnorm(zPriorMu[3], zPriorVar[3]^(-1/2))
zbeta[4] ~ dnorm(zPriorMu[4], zPriorVar[4]^(-1/2))
zbeta[5] ~ dnorm(zPriorMu[5], zPriorVar[5]^(-1/2))
# prior for var in final gamma distribution, assume no information
zVar ~ dgamma( 0.01 , 0.010 )
# Transform to original scale:
beta[1:(Nx-1)] <- ( zbeta[1:(Nx-1)] / xsd[1:(Nx-1)] ) * ysd
beta[Nx] <- zbeta[Nx] * ysd
beta0 <- zbeta0*ysd
tau <- zVar*ysd # parameter for gamma
# Compute predictions at every step of the MCMC
for ( i in 1:5 ) {
pred[i] <- beta0 + beta[1] * xPred[i,1] + beta[2] * xPred[i,2] + beta[3] * xPred[i,3] + beta[4] * xPred[i,4] + beta[5] * xPred[i,5]
}
}
" # close quote for modelString
writeLines( modelString , con="TEMPmodel.txt" )
adaptSteps = 3000    # Number of steps to "tune" the samplers
burnInSteps = 4000   # Burn-in gives time for chains to overlap
nChains = 2
thinSteps = 12       # Reduces autocorrelation
numSavedSteps = 4000 # Save after thinning
##############################################
# RUN MCMC
# Parallel run - instead of jags.model and burn-in
startTime = proc.time()
runJagsOut <- run.jags( method="parallel" ,
model="TEMPmodel.txt" ,
monitor=c( "zbeta0" ,  "zbeta" , "beta0" ,  "beta" ,  "tau", "zVar", "pred"),
data=dataList ,
#inits=initsList ,
n.chains=nChains ,
adapt=adaptSteps ,
burnin=burnInSteps ,
sample=numSavedSteps ,
thin=thinSteps , summarise=FALSE , plots=FALSE )
codaSamples = as.mcmc.list( runJagsOut )
stopTime = proc.time()
elapsedTime = stopTime - startTime
show(elapsedTime)
save.image(file='MultReg_Assignment2.RData')
load('MultReg_Assignment2.RData')
##############################################
# DIAGNOSIS CHECKS
diagMCMC( codaSamples , parName="beta0" )
diagMCMC( codaSamples , parName="beta[1]" )
diagMCMC( codaSamples , parName="beta[2]" )
diagMCMC( codaSamples , parName="beta[3]" )
diagMCMC( codaSamples , parName="beta[4]" )
diagMCMC( codaSamples , parName="beta[5]" )
diagMCMC( codaSamples , parName="tau" )
##############################################
# SUMMARISE AND VIEW THE POSTERIORS
compVal <- data.frame("beta0" = summary(codaSamples)$statistics[,"Mean"][["beta0"]],
"beta[1]" = summary(codaSamples)$statistics[,"Mean"][["beta[1]"]],
"beta[2]" = summary(codaSamples)$statistics[,"Mean"][["beta[2]"]],
"beta[3]" = summary(codaSamples)$statistics[,"Mean"][["beta[3]"]],
"beta[4]" = summary(codaSamples)$statistics[,"Mean"][["beta[4]"]],
"beta[5]" = summary(codaSamples)$statistics[,"Mean"][["beta[5]"]],
"tau" = summary(codaSamples)$statistics[,"Mean"][["tau"]],
"pred[1]" = summary(codaSamples)$statistics[,"Mean"][["pred[1]"]],
"pred[2]" = summary(codaSamples)$statistics[,"Mean"][["pred[2]"]],
"pred[3]" = summary(codaSamples)$statistics[,"Mean"][["pred[3]"]],
"pred[4]" = summary(codaSamples)$statistics[,"Mean"][["pred[4]"]],
"pred[5]" = summary(codaSamples)$statistics[,"Mean"][["pred[5]"]],
check.names=FALSE)
summaryInfo <- smryMCMC(codaSamples=codaSamples,
compVal=compVal)
print(summaryInfo)
plotMCMC_HD(codaSamples=codaSamples,
data=myData,
xName=c("Area","Bedrooms","Bathrooms","CarParks","PropertyType") ,
yName="SalePrice.100K.", compVal = compVal)
codaSamples
