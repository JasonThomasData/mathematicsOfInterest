saveName=NULL , saveType="jpg" ) {
# showCurve is TRUE or FALSE and indicates whether the posterior should
#   be displayed as a histogram (by default) or by an approximate curve.
# pairsPlot is TRUE or FALSE and indicates whether scatterplots of pairs
#   of parameters should be displayed.
#-----------------------------------------------------------------------------
y = data[,yName]
x = as.matrix(data[,xName])
mcmcMat = as.matrix(codaSamples,chains=TRUE)
chainLength = NROW( mcmcMat )
# zbeta0 = mcmcMat[,"zbeta0"]
# zbeta  = mcmcMat[,grep("^zbeta$|^zbeta\\[",colnames(mcmcMat))]
# if ( ncol(x)==1 ) { zbeta = matrix( zbeta , ncol=1 ) }
beta0 = mcmcMat[,"beta0"]
beta  = mcmcMat[,grep("^beta$|^beta\\[",colnames(mcmcMat))]
if ( ncol(x)==1 ) { beta = matrix( beta , ncol=1 ) }
if (preds){
pred = mcmcMat[,grep("^pred$|^pred\\[",colnames(mcmcMat))]
} # Added by Demirhan
guess = mcmcMat[,"guess"]
#-----------------------------------------------------------------------------
# Compute R^2 for credible parameters:
YcorX = cor( y , x ) # correlation of y with each x predictor
Rsq = beta %*% matrix( YcorX , ncol=1 )
#-----------------------------------------------------------------------------
if ( pairsPlot ) {
# Plot the parameters pairwise, to see correlations:
openGraph()
nPtToPlot = 1000
plotIdx = floor(seq(1,chainLength,by=chainLength/nPtToPlot))
panel.cor = function(x, y, digits=2, prefix="", cex.cor, ...) {
usr = par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y))
txt = format(c(r, 0.123456789), digits=digits)[1]
txt = paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex=1.25 ) # was cex=cex.cor*r
}
pairs( cbind( beta0 , beta , tau )[plotIdx,] ,
labels=c( "beta[0]" ,
paste0("beta[",1:ncol(beta),"]\n",xName) ,
expression(tau) ) ,
lower.panel=panel.cor , col="skyblue" )
if ( !is.null(saveName) ) {
saveGraph( file=paste(saveName,"PostPairs",sep=""), type=saveType)
}
}
#-----------------------------------------------------------------------------
# Marginal histograms:
decideOpenGraph = function( panelCount , saveName , finished=FALSE ,
nRow=2 , nCol=3 ) {
# If finishing a set:
if ( finished==TRUE ) {
if ( !is.null(saveName) ) {
saveGraph( file=paste0(saveName,ceiling((panelCount-1)/(nRow*nCol))),
type=saveType)
}
panelCount = 1 # re-set panelCount
return(panelCount)
} else {
# If this is first panel of a graph:
if ( ( panelCount %% (nRow*nCol) ) == 1 ) {
# If previous graph was open, save previous one:
if ( panelCount>1 & !is.null(saveName) ) {
saveGraph( file=paste0(saveName,(panelCount%/%(nRow*nCol))),
type=saveType)
}
# Open new graph
openGraph(width=nCol*7.0/3,height=nRow*2.0)
layout( matrix( 1:(nRow*nCol) , nrow=nRow, byrow=TRUE ) )
par( mar=c(4,4,2.5,0.5) , mgp=c(2.5,0.7,0) )
}
# Increment and return panel count:
panelCount = panelCount+1
return(panelCount)
}
}
# Original scale:
panelCount = 1
panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMarg") )
histInfo = plotPost( beta0 , cex.lab = 1.75 , showCurve=showCurve ,
xlab=bquote(beta[0]) , main="Intercept", compVal = as.numeric(compVal["beta0"] ))
for ( bIdx in 1:ncol(beta) ) {
panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMarg") )
if (!is.na(compVal[paste0("beta[",bIdx,"]")])){
histInfo = plotPost( beta[,bIdx] , cex.lab = 1.75 , showCurve=showCurve ,
xlab=bquote(beta[.(bIdx)]) , main=xName[bIdx],
compVal = as.numeric(compVal[paste0("beta[",bIdx,"]")]))
} else{
histInfo = plotPost( beta[,bIdx] , cex.lab = 1.75 , showCurve=showCurve ,
xlab=bquote(beta[.(bIdx)]) , main=xName[bIdx])
}
}
# panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMarg") )
# histInfo = plotPost( Rsq , cex.lab = 1.75 , showCurve=showCurve ,
#                      xlab=bquote(R^2) , main=paste("Prop Var Accntd") , finished=FALSE )
#
panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMarg") )
histInfo = plotPost( guess , cex.lab = 1.75 , showCurve=showCurve ,
xlab="Guess parameter" , main=paste("Prop Var Accntd") , finished=TRUE )
panelCount = 1
if ( pred){
for ( pIdx in 1:ncol(pred) ) {
panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMarg") )
histInfo = plotPost( pred[,pIdx] , cex.lab = 1.75 , showCurve=showCurve ,
xlab=bquote(pred[.(pIdx)]) , main=paste0("Prediction ",pIdx) )
}
}# Added by Demirhan
# Standardized scale:
panelCount = 1
# panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMargZ") )
# histInfo = plotPost( zbeta0 , cex.lab = 1.75 , showCurve=showCurve ,
#                      xlab=bquote(z*beta[0]) , main="Intercept" )
# for ( bIdx in 1:ncol(beta) ) {
#   panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMargZ") )
#   histInfo = plotPost( zbeta[,bIdx] , cex.lab = 1.75 , showCurve=showCurve ,
#                        xlab=bquote(z*beta[.(bIdx)]) , main=xName[bIdx] )
# }
panelCount = decideOpenGraph( panelCount , saveName=paste0(saveName,"PostMargZ") )
histInfo = plotPost( Rsq , cex.lab = 1.75 , showCurve=showCurve ,
xlab=bquote(R^2) , main=paste("Prop Var Accntd") )
panelCount = decideOpenGraph( panelCount , finished=TRUE , saveName=paste0(saveName,"PostMargZ") )
#-----------------------------------------------------------------------------
}
# Display posterior information:
plotMCMC_HD(codaSamples=codaSamples,
data=toKeepData,
xName=toKeepIndependentVariables,
yName="DEATH_EVENT",
compVal = compVal,
preds=FALSE)
# Display posterior information:
plotMCMC_HD(codaSamples=codaSamples,
data=toKeepData,
xName=toKeepIndependentVariables,
yName="DEATH_EVENT",
compVal = compVal,
preds=FALSE)
plotMCMC_HD(codaSamples=codaSamples,
data=toKeepData,
xName=toKeepIndependentVariables,
yName="DEATH_EVENT",
compVal = compVal,
preds=TRUE)
data <- read.csv("heart_failure_clinical_records_dataset2.csv")
data <- data[1:30,]
head(data)
independentVarLables <- c(numericalIndependentVariables, binaryIndependentVariables)
x <- as.matrix(data[,independentVarLables])
y <- as.vector(data[,"DEATH_EVENT"])
dataList <- list(
x = x,
y = y,
Nx = dim(x)[2],
Ntotal = dim(x)[1]
)
modelString = "
data {
numericalCount <- 7
for ( j in 1:Nx ) {
xm[j]  <- mean(x[,j])
xsd[j] <-   sd(x[,j])
for ( i in 1:Ntotal ) {
# For simplicity, standardise all variables, even binary ones
zx[i,j] <- ( x[i,j] - xm[j] ) / xsd[j]
}
}
}
model {
for ( i in 1:Ntotal ) {
# In JAGS, ilogit is logistic:
y[i] ~ dbern( mu[i] )
mu[i] <- ( guess*(1/2) + (1.0-guess)*ilogit(zbeta0+sum(zbeta[1:Nx]*zx[i,1:Nx])) )
}
# Priors vague on standardized scale:
zbeta0 ~ dnorm( 0 , 1/2^2 )
# non-informative run
for ( j in 1:Nx ) {
zbeta[j] ~ dnorm( 0 , 1/2^2 )
}
guess ~ dbeta(1,9) # Used for robustness
# Transform to original scale:
beta[1:numericalCount] <- zbeta[1:numericalCount] / xsd[1:numericalCount]
beta[(numericalCount+1):Nx] <- zbeta[(numericalCount+1):Nx]
beta0 <- zbeta0 - sum( zbeta[1:Nx] * xm[1:Nx] / xsd[1:Nx] )
}
"
writeLines( modelString , con="TEMPmodel.txt" )
parameters = c( "zbeta", "zbeta0", "beta0", "beta", "guess")
adaptSteps = 1000    # Number of steps to "tune" the samplers
burnInSteps = 3000   # Burn-in gives time for chains to overlap
nChains = 2
thinSteps = 6       # Reduces autocorrelation
numSavedSteps = 4000 # Save after thinning
startTime = proc.time()
runJagsOut <- run.jags( method="parallel",
model="TEMPmodel.txt" ,
monitor=parameters ,
data=dataList ,
#inits=initsList ,
n.chains=nChains ,
adapt=adaptSteps ,
burnin=burnInSteps ,
sample=numSavedSteps,
thin=thinSteps ,
summarise=FALSE ,
plots=FALSE )
codaSamples = as.mcmc.list( runJagsOut )
stopTime = proc.time()
elapsedTime = stopTime - startTime
show(elapsedTime)
parameterNames = varnames(codaSamples) # get all parameter names
for ( parName in parameterNames[1:13] ) {
diagMCMC( codaSamples , parName=parName ,
saveName="out-" , saveType="png" )
}
compVal <- data.frame("beta0" = 0,
"beta[1]" = 0,
"beta[2]" = 0,
"beta[3]" = 0,
"beta[4]" = 0,
"beta[5]" = 0,
"beta[6]" = 0,
"beta[7]" = 0,
"beta[8]" = 0,
"beta[9]" = 0,
"beta[10]" = 0,
"beta[11]" = 0,
"beta[12]" = 0,
check.names=FALSE)
# Display posterior information:
plotMCMC_HD(codaSamples=codaSamples,
data=data,
xName=independentVarLables,
yName="DEATH_EVENT",
compVal = compVal)
compVal <- data.frame("beta0" = 0,
"beta[1]" = 0,
"beta[2]" = 0,
"beta[3]" = 0,
"beta[4]" = 0,
"beta[5]" = 0,
"beta[6]" = 0,
"beta[7]" = 0,
"beta[8]" = 0,
"beta[9]" = 0,
"beta[10]" = 0,
"beta[11]" = 0,
"beta[12]" = 0,
check.names=FALSE)
# Display posterior information:
plotMCMC_HD(codaSamples=codaSamples,
data=data,
xName=independentVarLables,
yName="DEATH_EVENT",
compVal = compVal)
data <- read.csv("heart_failure_clinical_records_dataset2.csv")
#data <- data[1:30,]
head(data)
#summary(data)
# Then it should be clear that there are numerical and binary variables in this data.
##########################################
# DESCRIPTIVE CHECKS
# First check for correlations between variables
# The trouble is that different variable types (binary, numerical) should be
library("mltools")
library("ltm")
correlations <- data.frame(matrix(NA, nrow = 12, ncol = 12))
varNamesWithType <- c("age(N)", "anae(B)", "crea_ph(N)", "diab(B)", "ejec_fr(N)", "high_bl(B)", "plat(N)", "seru_cr(N)", "seru_so(N)", "sex(B)", "smok(B)", "time(N)")
colnames(correlations) <- varNamesWithType
rownames(correlations) <- varNamesWithType
numericalIndependentVariables <- c("age", "creatinine_phosphokinase", "ejection_fraction", "platelets", "serum_creatinine", "serum_sodium", "time")
binaryIndependentVariables <- c("anaemia", "diabetes", "high_blood_pressure", "sex", "smoking")
for (i in 1:12) {
for (j in 1:12) {
leftComparison <- colnames(data)[i]
rightComparison <- colnames(data)[j]
if (leftComparison %in% numericalIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(cor(x=data[,i], y=data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(mcc(data[,i], data[,j]), 3)
} else if (leftComparison %in% numericalIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,i], data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,j], data[,i]), 3)
} else {
print("danger")
}
}
}
library("rstatix")
longFormat <- correlations %>% cor_gather()
ggplot(longFormat, aes(var1, var2)) +
geom_tile(aes(fill = cor)) +
geom_text(aes(label = round(cor, 1))) +
scale_fill_gradient2(low="lightblue", high="darkblue", guide="colorbar") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x="", y="")
# overall, low correlations. Since all correlations < 0.4, then there's no reason to remove any variable yet
# Now check for variables correlating with the dependent variable
listOfPlots <- list()
for (i in 1:length(numericalIndependentVariables)) {
variableName <- numericalIndependentVariables[i]
onePlot <- ggplot(data, aes(x=data[,variableName], y=DEATH_EVENT)) +
geom_point() +
xlab(variableName) +
ylab("DEATH_EVENT")
listOfPlots[[i]] <- onePlot
}
figure <- ggarrange(plotlist = listOfPlots, nrow = 3, ncol = 3)
figure
# Plotting binary ~ binary (independent ~ dependent)
table(data[,c(2,13)])
table(data[,c(4,13)])
table(data[,c(6,13)])
table(data[,c(10,13)])
table(data[,c(11,13)])
hist(data$DEATH_EVENT, main= "Histogram of the dependent variable", xlab = "DEATH_EVENT")
data <- read.csv("heart_failure_clinical_records_dataset2.csv")
#data <- data[1:30,]
head(data)
#summary(data)
# Then it should be clear that there are numerical and binary variables in this data.
##########################################
# DESCRIPTIVE CHECKS
# First check for correlations between variables
# The trouble is that different variable types (binary, numerical) should be
library("mltools")
library("ltm")
correlations <- data.frame(matrix(NA, nrow = 12, ncol = 12))
varNamesWithType <- c("age(N)", "anae(B)", "crea_ph(N)", "diab(B)", "ejec_fr(N)", "high_bl(B)", "plat(N)", "seru_cr(N)", "seru_so(N)", "sex(B)", "smok(B)", "time(N)")
colnames(correlations) <- varNamesWithType
rownames(correlations) <- varNamesWithType
numericalIndependentVariables <- c("age", "creatinine_phosphokinase", "ejection_fraction", "platelets", "serum_creatinine", "serum_sodium", "time")
binaryIndependentVariables <- c("anaemia", "diabetes", "high_blood_pressure", "sex", "smoking")
for (i in 1:12) {
for (j in 1:12) {
leftComparison <- colnames(data)[i]
rightComparison <- colnames(data)[j]
if (leftComparison %in% numericalIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(cor(x=data[,i], y=data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(mcc(data[,i], data[,j]), 3)
} else if (leftComparison %in% numericalIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,i], data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,j], data[,i]), 3)
} else {
print("danger")
}
}
}
library("rstatix")
longFormat <- correlations %>% cor_gather()
ggplot(longFormat, aes(var1, var2)) +
geom_tile(aes(fill = cor)) +
geom_text(aes(label = round(cor, 1))) +
scale_fill_gradient2(low="lightblue", high="darkblue", guide="colorbar") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x="", y="")
# overall, low correlations. Since all correlations < 0.4, then there's no reason to remove any variable yet
# Now check for variables correlating with the dependent variable
listOfPlots <- list()
for (i in 1:length(numericalIndependentVariables)) {
variableName <- numericalIndependentVariables[i]
onePlot <- ggplot(data, aes(x=data[,variableName], y=DEATH_EVENT)) +
geom_point() +
xlab(variableName) +
ylab("DEATH_EVENT")
listOfPlots[[i]] <- onePlot
}
figure <- ggarrange(plotlist = listOfPlots, nrow = 3, ncol = 3)
figure
# Plotting binary ~ binary (independent ~ dependent)
table(data[,c(2,13)])
table(data[,c(4,13)])
table(data[,c(6,13)])
table(data[,c(10,13)])
table(data[,c(11,13)])
hist(data$DEATH_EVENT, main= "Histogram of the dependent variable", xlab = "DEATH_EVENT")
data <- read.csv("heart_failure_clinical_records_dataset2.csv")
#data <- data[1:30,]
head(data)
#summary(data)
# Then it should be clear that there are numerical and binary variables in this data.
##########################################
# DESCRIPTIVE CHECKS
# First check for correlations between variables
# The trouble is that different variable types (binary, numerical) should be
library("mltools")
library("ltm")
correlations <- data.frame(matrix(NA, nrow = 12, ncol = 12))
varNamesWithType <- c("age(N)", "anae(B)", "crea_ph(N)", "diab(B)", "ejec_fr(N)", "high_bl(B)", "plat(N)", "seru_cr(N)", "seru_so(N)", "sex(B)", "smok(B)", "time(N)")
colnames(correlations) <- varNamesWithType
rownames(correlations) <- varNamesWithType
numericalIndependentVariables <- c("age", "creatinine_phosphokinase", "ejection_fraction", "platelets", "serum_creatinine", "serum_sodium", "time")
binaryIndependentVariables <- c("anaemia", "diabetes", "high_blood_pressure", "sex", "smoking")
for (i in 1:12) {
for (j in 1:12) {
leftComparison <- colnames(data)[i]
rightComparison <- colnames(data)[j]
if (leftComparison %in% numericalIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(cor(x=data[,i], y=data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(mcc(data[,i], data[,j]), 3)
} else if (leftComparison %in% numericalIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,i], data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,j], data[,i]), 3)
} else {
print("danger")
}
}
}
library("rstatix")
longFormat <- correlations %>% cor_gather()
ggplot(longFormat, aes(var1, var2)) +
geom_tile(aes(fill = cor)) +
geom_text(aes(label = round(cor, 1))) +
scale_fill_gradient2(low="lightblue", high="darkblue", guide="colorbar") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x="", y="")
library(ggplot2)
library(ggpubr)
library(ks)
library(rjags)
library(runjags)
source("DBDA2E-utilities.R")
data <- read.csv("heart_failure_clinical_records_dataset2.csv")
#data <- data[1:30,]
#head(data)
#summary(data)
# Then it should be clear that there are numerical and binary variables in this data.
##########################################
# DESCRIPTIVE CHECKS
# First check for correlations between variables
# The trouble is that different variable types (binary, numerical) should be
library("mltools")
library("ltm")
correlations <- data.frame(matrix(NA, nrow = 12, ncol = 12))
varNamesWithType <- c("age(N)", "anae(B)", "crea_ph(N)", "diab(B)", "ejec_fr(N)", "high_bl(B)", "plat(N)", "seru_cr(N)", "seru_so(N)", "sex(B)", "smok(B)", "time(N)")
colnames(correlations) <- varNamesWithType
rownames(correlations) <- varNamesWithType
numericalIndependentVariables <- c("age", "creatinine_phosphokinase", "ejection_fraction", "platelets", "serum_creatinine", "serum_sodium", "time")
binaryIndependentVariables <- c("anaemia", "diabetes", "high_blood_pressure", "sex", "smoking")
for (i in 1:12) {
for (j in 1:12) {
leftComparison <- colnames(data)[i]
rightComparison <- colnames(data)[j]
if (leftComparison %in% numericalIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(cor(x=data[,i], y=data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(mcc(data[,i], data[,j]), 3)
} else if (leftComparison %in% numericalIndependentVariables && rightComparison %in% binaryIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,i], data[,j]), 3)
} else if (leftComparison %in% binaryIndependentVariables && rightComparison %in% numericalIndependentVariables) {
correlations[i,j] <- round(biserial.cor(data[,j], data[,i]), 3)
} else {
print("danger")
}
}
}
library("rstatix")
longFormat <- correlations %>% cor_gather()
ggplot(longFormat, aes(var1, var2)) +
geom_tile(aes(fill = cor)) +
geom_text(aes(label = round(cor, 1))) +
scale_fill_gradient2(low="lightblue", high="darkblue", guide="colorbar") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(x="", y="")
# overall, low correlations. Since all correlations < 0.4, then there's no reason to remove any variable yet
# Now check for variables correlating with the dependent variable
listOfPlots <- list()
for (i in 1:length(numericalIndependentVariables)) {
variableName <- numericalIndependentVariables[i]
onePlot <- ggplot(data, aes(x=data[,variableName], y=DEATH_EVENT)) +
geom_point() +
xlab(variableName) +
ylab("DEATH_EVENT")
listOfPlots[[i]] <- onePlot
}
figure <- ggarrange(plotlist = listOfPlots, nrow = 3, ncol = 3)
figure
# Plotting binary ~ binary (independent ~ dependent)
table(data[,c(2,13)])
table(data[,c(4,13)])
table(data[,c(6,13)])
table(data[,c(10,13)])
table(data[,c(11,13)])
hist(data$DEATH_EVENT, main= "Histogram of the dependent variable", xlab = "DEATH_EVENT")
listOfPlots <- list()
for (i in 1:length(numericalIndependentVariables)) {
variableName <- numericalIndependentVariables[i]
onePlot <- ggplot(data, aes(x=data[,variableName], y=DEATH_EVENT)) +
geom_point() +
xlab(variableName) +
ylab("DEATH_EVENT")
listOfPlots[[i]] <- onePlot
}
figure <- ggarrange(plotlist = listOfPlots, nrow = 3, ncol = 3)
figure
table(data[,c(2,13)])
table(data[,c(4,13)])
table(data[,c(6,13)])
table(data[,c(10,13)])
table(data[,c(11,13)])
t = table(data[,c(2,13)])
t
t$anaemia
t[,1]
t[1,]
